<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Casts\Attribute;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Storage;

class Book extends Model
{
    use HasFactory;

    protected $fillable = [
        'title'
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::deleting(function ($book) {
            $book->pages->each(fn ($page) => $page->delete());
            Storage::disk('public')->deleteDirectory($book->path);
        });
    }

    protected function title(): Attribute
    {
        return Attribute::make(
            get: fn($value) => ucwords($value),
            set: fn($value) => strtolower($value)
        );
    }

    protected function folderName(): Attribute
    {
        return Attribute::get(fn() => str($this->title)->ascii()->lower()->replaceMatches("/([^\p{L}\s\d\-_~,;:\[\]\(\).'])/", '')->snake()->value());
    }

    protected function path(): Attribute
    {
        return Attribute::get(fn() => 'books/' . $this->folderName);
    }

    protected function coverPath(): Attribute
    {
        return Attribute::get(fn() => $this->path . '/cover.jpg');
    }

    protected function coverUrl(): Attribute
    {
        return Attribute::get(fn() => Storage::url($this->coverPath));
    }

    public function pages(): \Illuminate\Database\Eloquent\Relations\HasMany
    {
        return $this->hasMany(Page::class);
    }

    public function storeCover(UploadedFile $file): void
    {
        $file->storeAs('books/' . $this->folderName, 'cover.jpg', 'public');
    }
}
